webpackJsonp([11],{

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _react = __webpack_require__(70);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = __webpack_require__(103);\n\nvar _styles = __webpack_require__(274);\n\nvar styles = _interopRequireWildcard(_styles);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n////////////////////////////////////////////////////////////////////////////////\n// Let's make some tabs...\n\nvar Tabs = _react2.default.createClass({\n  displayName: 'Tabs',\n  getInitialState: function getInitialState() {\n    return {\n      activeIndex: 0\n    };\n  },\n  selectTabIndex: function selectTabIndex(activeIndex) {\n    this.setState({ activeIndex: activeIndex });\n  },\n  renderTabs: function renderTabs() {\n    var _this = this;\n\n    return this.props.data.map(function (tab, index) {\n      var isActive = _this.state.activeIndex === index;\n      return _react2.default.createElement(\n        'div',\n        {\n          key: tab.label,\n          style: isActive ? styles.activeTab : styles.tab,\n          onClick: function onClick() {\n            return _this.selectTabIndex(index);\n          }\n        },\n        tab.label\n      );\n    });\n  },\n  renderPanel: function renderPanel() {\n    var tab = this.props.data[this.state.activeIndex];\n    return _react2.default.createElement(\n      'div',\n      null,\n      _react2.default.createElement(\n        'p',\n        null,\n        tab.description\n      )\n    );\n  },\n  render: function render() {\n    return _react2.default.createElement(\n      'div',\n      null,\n      _react2.default.createElement(\n        'div',\n        { style: styles.tabs },\n        this.renderTabs()\n      ),\n      _react2.default.createElement(\n        'div',\n        { style: styles.tabPanels },\n        this.renderPanel()\n      )\n    );\n  }\n});\n\nvar App = _react2.default.createClass({\n  displayName: 'App',\n  render: function render() {\n    var tabData = [{\n      label: 'Tacos',\n      description: _react2.default.createElement(\n        'p',\n        null,\n        'Tacos are delicious'\n      )\n    }, {\n      label: 'Burritos',\n      description: _react2.default.createElement(\n        'p',\n        null,\n        'Sometimes a burrito is what you really need.'\n      )\n    }, {\n      label: 'Coconut Korma',\n      description: _react2.default.createElement(\n        'p',\n        null,\n        'Might be your best option.'\n      )\n    }];\n\n    return _react2.default.createElement(\n      'div',\n      null,\n      _react2.default.createElement(Tabs, { data: tabData })\n    );\n  }\n});\n\n(0, _reactDom.render)(_react2.default.createElement(App, null), document.getElementById('app'));\n\n////////////////////////////////////////////////////////////////////////////////\n// What if I wanted tabs on the bottom?\n\n//const Tabs = React.createClass({\n//  getDefaultProps() {\n//    return {\n//      tabsPlacement: 'top'\n//    }\n//  },\n//\n//  getInitialState() {\n//    return {\n//      activeIndex: 0\n//    }\n//  },\n//\n//  selectTabIndex(activeIndex) {\n//    this.setState({ activeIndex })\n//  },\n//\n//  renderTabs() {\n//    return this.props.data.map((tab, index) => {\n//      const isActive = this.state.activeIndex === index\n//      return (\n//        <div\n//          key={tab.label}\n//          style={isActive ? styles.activeTab : styles.tab}\n//          onClick={() => this.selectTabIndex(index)}\n//        >{tab.label}</div>\n//      )\n//    })\n//  },\n//\n//  renderPanel() {\n//    const tab = this.props.data[this.state.activeIndex]\n//    return (\n//      <div>\n//        <p>{tab.description}</p>\n//      </div>\n//    )\n//  },\n//\n//  render() {\n//    const tabs = (\n//      <div key=\"tabs\" style={styles.tabs}>\n//        {this.renderTabs()}\n//      </div>\n//    )\n//    const panel = (\n//      <div key=\"panel\" style={styles.tabPanels}>\n//        {this.renderPanel()}\n//      </div>\n//    )\n//    return (\n//      <div>\n//        {this.props.tabsPlacement === 'top' ?\n//          [tabs, panel] :\n//          [panel, tabs]\n//        }\n//      </div>\n//    )\n//  }\n//})\n//\n//const App = React.createClass({\n//  render() {\n//    const tabData = [\n//      {\n//        label: 'Tacos',\n//        description: <p>Tacos are delicious</p>\n//      },\n//      {\n//        label: 'Burritos',\n//        description: <p>Sometimes a burrito is what you really need.</p>\n//      },\n//      {\n//        label: 'Coconut Korma',\n//        description: <p>Might be your best option.</p>\n//      }\n//    ]\n//\n//    return (\n//      <div>\n//        <Tabs data={tabData} tabsPlacement=\"bottom\"/>\n//      </div>\n//    )\n//  }\n//})\n//\n//render(<App/>, document.getElementById('app'))\n\n////////////////////////////////////////////////////////////////////////////////\n// That wasn't too bad, but it added a lot of complexity for something that\n// didn't seem to warrant that much of a change\n//\n// - render is less obvious\n// - have to use keys, or wrap stuff in extra divs\n// - adding another option that has to do with rendering will add even more\n//   complexity\n\n////////////////////////////////////////////////////////////////////////////////\n// Lets add \"disabled\" to a tab, what does jQuery UI do?\n// https://api.jqueryui.com/tabs/#option-disabled\n\n//const Tabs = React.createClass({\n//  getDefaultProps() {\n//    return {\n//      tabsPlacement: 'top',\n//      disabled: []\n//    }\n//  },\n//\n//  getInitialState() {\n//    return {\n//      activeIndex: 0\n//    }\n//  },\n//\n//  selectTabIndex(activeIndex) {\n//    this.setState({ activeIndex })\n//  },\n//\n//  renderTabs() {\n//    return this.props.data.map((tab, index) => {\n//      const isActive = this.state.activeIndex === index\n//      const isDisabled = this.props.disabled.indexOf(index) !== -1\n//      const props = {\n//        key: tab.label,\n//        style: isDisabled ? styles.disabledTab : (\n//          isActive ? styles.activeTab : styles.tab\n//        )\n//      }\n//      if (!isDisabled)\n//        props.onClick = () => this.selectTabIndex(index)\n//      return <div {...props}>{tab.label}</div>\n//    })\n//  },\n//\n//  renderPanel() {\n//    const tab = this.props.data[this.state.activeIndex]\n//    return (\n//      <div>\n//        <p>{tab.description}</p>\n//      </div>\n//    )\n//  },\n//\n//  render() {\n//    const tabs = (\n//      <div key=\"tabs\" style={styles.tabs}>\n//        {this.renderTabs()}\n//      </div>\n//    )\n//    const panel = (\n//      <div key=\"panel\" style={styles.tabPanels}>\n//        {this.renderPanel()}\n//      </div>\n//    )\n//    return (\n//      <div>\n//        {this.props.tabsPlacement === 'top' ?\n//          [tabs, panel] :\n//          [panel, tabs]\n//        }\n//      </div>\n//    )\n//  }\n//})\n//\n//const App = React.createClass({\n//  render() {\n//    const tabData = [\n//      {\n//        label: 'Tacos',\n//        description: <p>Tacos are delicious</p>\n//      },\n//      {\n//        label: 'Burritos',\n//        description: <p>Sometimes a burrito is what you really need.</p>\n//      },\n//      {\n//        label: 'Coconut Korma',\n//        description: <p>Might be your best option.</p>\n//      }\n//    ]\n//\n//    return (\n//      <div>\n//        <Tabs\n//          data={tabData}\n//          tabsPlacement=\"top\"\n//          disabled={[ 1 ]}\n//        />\n//      </div>\n//    )\n//  }\n//})\n//\n//render(<App/>, document.getElementById('app'))\n\n////////////////////////////////////////////////////////////////////////////////\n// Feels weird ... whenever your options affect rendering, its a great\n// opportunity to create child components instead\n\n////////////////////////////////////////////////////////////////////////////////\n//const TabList = React.createClass({\n//  render() {\n//    const children = this.props.children\n//    return <div style={styles.tabs}>{children}</div>\n//  }\n//})\n//\n//const Tab = React.createClass({\n//  render() {\n//    const isDisabled = false\n//    const isActive = false\n//    const style = isDisabled ?\n//      styles.disabledTab :\n//      isActive ?\n//        styles.activeTab :\n//        styles.tab\n//\n//    return (\n//      <div style={style}>\n//        {this.props.children}\n//      </div>\n//    )\n//  }\n//})\n//\n//const TabPanels = React.createClass({\n//  render() {\n//    return (\n//      <div style={styles.tabPanels}>\n//        {this.props.children}\n//      </div>\n//    )\n//  }\n//})\n//\n//const TabPanel = React.createClass({\n//  render() {\n//    return <div>{this.props.children}</div>\n//  }\n//})\n//\n//const Tabs = React.createClass({\n//  getInitialState() {\n//    return {\n//      activeIndex: 0\n//    }\n//  },\n//\n//  render() {\n//    const children = this.props.children\n//    return <div>{children}</div>\n//  }\n//})\n//\n//const App = React.createClass({\n//  render() {\n//    return (\n//      <div>\n//        <Tabs>\n//          <TabList>\n//            <Tab>Tacos</Tab>\n//            <Tab isDisabled>Burritos</Tab>\n//            <Tab>Coconut Korma</Tab>\n//          </TabList>\n//          <TabPanels>\n//            <TabPanel>\n//              <p>Tacos are delicious</p>\n//            </TabPanel>\n//            <TabPanel>\n//              <p>Sometimes a burrito is what you really need.</p>\n//            </TabPanel>\n//            <TabPanel>\n//              <p>Might be your best option.</p>\n//            </TabPanel>\n//          </TabPanels>\n//        </Tabs>\n//      </div>\n//    )\n//  }\n//})\n//\n//render(<App/>, document.getElementById('app'))\n\n////////////////////////////////////////////////////////////////////////////////\n// Now we can pass the props that matter to the components, and add the click\n// handlers\n\n//const TabList = React.createClass({\n//  render() {\n//    const children = React.Children.map(this.props.children, (child, index) => {\n//      return React.cloneElement(child, {\n//        isActive: index === this.props.activeIndex,\n//        onClick: () => this.props.onActivate(index)\n//      })\n//    })\n//\n//    return <div style={styles.tabs}>{children}</div>\n//  }\n//})\n//\n//const Tab = React.createClass({\n//  render() {\n//    return (\n//      <div\n//        onClick={this.props.isDisabled ? null : this.props.onClick}\n//        style={this.props.isDisabled ? styles.disabledTab : (\n//          this.props.isActive ? styles.activeTab : styles.tab\n//        )}\n//      >\n//        {this.props.children}\n//      </div>\n//    )\n//  }\n//})\n//\n//const TabPanels = React.createClass({\n//  render() {\n//    return (\n//      <div style={styles.tabPanels}>\n//        {this.props.children[this.props.activeIndex]}\n//      </div>\n//    )\n//  }\n//})\n//\n//const TabPanel = React.createClass({\n//  render() {\n//    return <div>{this.props.children}</div>\n//  }\n//})\n//\n//const Tabs = React.createClass({\n//  getInitialState() {\n//    return {\n//      activeIndex: 0\n//    }\n//  },\n//\n//  render() {\n//    const children = React.Children.map(this.props.children, (child, index) => {\n//      if (child.type === TabPanels) {\n//        return React.cloneElement(child, {\n//          activeIndex: this.state.activeIndex\n//        })\n//      } else if (child.type === TabList) {\n//        return React.cloneElement(child, {\n//          activeIndex: this.state.activeIndex,\n//          onActivate: (activeIndex) => this.setState({ activeIndex })\n//        })\n//      } else {\n//        return child\n//      }\n//    })\n//\n//    return <div>{children}</div>\n//  }\n//})\n//\n//const App = React.createClass({\n//  render() {\n//    return (\n//      <div>\n//        <Tabs>\n//          <TabList>\n//            <Tab>Tacos</Tab>\n//            <Tab isDisabled>Burritos</Tab>\n//            <Tab>Coconut Korma</Tab>\n//          </TabList>\n//\n//          <TabPanels>\n//            <TabPanel>\n//              <p>Tacos are delicious</p>\n//            </TabPanel>\n//            <TabPanel>\n//              <p>Sometimes a burrito is what you really need.</p>\n//            </TabPanel>\n//            <TabPanel>\n//              <p>Might be your best option.</p>\n//            </TabPanel>\n//          </TabPanels>\n//        </Tabs>\n//      </div>\n//    )\n//  }\n//})\n//\n//render(<App/>, document.getElementById('app'))\n\n////////////////////////////////////////////////////////////////////////////////\n// Now this is really flexible\n//\n// - can change order of panels v. tabs\n// - can pass in our own styles to tabs\n// - can even have unrelated elements inside\n// - in other words, we now have control over rendering while\n//   Tabs handles the interaction\n//\n// Oh but you really loved the old tabs yeah?\n\n//const DataTabs = React.createClass({\n//  getDefaultProps() {\n//    return {\n//      disabled: []\n//    }\n//  },\n//  render() {\n//    return (\n//      <Tabs>\n//        <TabList>\n//          {this.props.data.map((item, index) => (\n//            <Tab key={item.label} disabled={this.props.disabled.indexOf(index) !== -1}>\n//              {item.label}\n//            </Tab>\n//          ))}\n//        </TabList>\n//\n//        <TabPanels>\n//          {this.props.data.map((item) => (\n//            <TabPanel key={item.label}>{item.description}</TabPanel>\n//          ))}\n//        </TabPanels>\n//      </Tabs>\n//    )\n//  }\n//})\n//\n//const App = React.createClass({\n//  render() {\n//    const tabData = [\n//      {\n//        label: 'Tacos',\n//        description: <p>Tacos are delicious</p>\n//      },\n//      {\n//        label: 'Burritos',\n//        description: <p>Sometimes a burrito is what you really need.</p>\n//      },\n//      {\n//        label: 'Coconut Korma',\n//        description: <p>Might be your best option.</p>\n//      }\n//    ]\n//\n//    return (\n//      <div>\n//        <DataTabs data={tabData}/>\n//      </div>\n//    )\n//  }\n//})\n//\n//render(<App/>, document.getElementById('app'))\n\n////////////////////////////////////////////////////////////////////////////////\n// Instead of creating a handful of options, compose several components together\n// and then compose them together into their own components.\n//\n// A really awesome library that does this is react-soundplayer\n\n//////////////////\n// WEBPACK FOOTER\n// ./subjects/CompoundComponents/lecture.js\n// module id = 0\n// module chunks = 11\n//# sourceURL=webpack:///./subjects/CompoundComponents/lecture.js?");

/***/ },

/***/ 274:
/***/ function(module, exports) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar tabs = exports.tabs = {};\n\nvar tab = exports.tab = {\n  display: 'inline-block',\n  padding: 10,\n  margin: 10,\n  borderBottom: '4px solid',\n  borderBottomColor: '#ccc',\n  cursor: 'pointer'\n};\n\nvar activeTab = exports.activeTab = _extends({}, tab, {\n  borderBottomColor: '#000'\n});\n\nvar disabledTab = exports.disabledTab = _extends({}, tab, {\n  opacity: 0.25,\n  cursor: 'default'\n});\n\nvar tabPanels = exports.tabPanels = {\n  padding: 10\n};\n\n//////////////////\n// WEBPACK FOOTER\n// ./subjects/CompoundComponents/lib/styles.js\n// module id = 274\n// module chunks = 11\n//# sourceURL=webpack:///./subjects/CompoundComponents/lib/styles.js?");

/***/ }

});