webpackJsonp([8],[
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _react = __webpack_require__(70);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = __webpack_require__(103);\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar isOpen = false;\n\nfunction handleClick() {\n  isOpen = !isOpen;\n  updateThePage();\n}\n\nfunction ContentToggle() {\n  var summaryClassName = 'ContentToggle__Summary';\n\n  if (isOpen) summaryClassName += ' ContentToggle__Summary--is-open';\n\n  return _react2.default.createElement(\n    'div',\n    { className: 'ContentToggle' },\n    _react2.default.createElement(\n      'button',\n      { onClick: handleClick, className: summaryClassName },\n      'Tacos'\n    ),\n    isOpen && _react2.default.createElement(\n      'div',\n      { className: 'ContentToggle__Details' },\n      _react2.default.createElement(\n        'p',\n        null,\n        'A taco is a traditional Mexican dish composed of a corn or wheat tortilla folded or rolled around a filling.'\n      )\n    )\n  );\n}\n\nfunction updateThePage() {\n  _reactDom2.default.render(_react2.default.createElement(ContentToggle, null), document.getElementById('app'));\n}\n\nupdateThePage();\n\n////////////////////////////////////////////////////////////////////////////////\n// Let's encapsulate state in an object and call it what it really is. Then, add\n// a setState function that we can use to update state and automatically update\n// the page any time the state changes.\n\n//////////////////////////////////////////////////////////////////////////////////\n// React gives us setState and automatically re-renders as the state changes.\n\n////////////////////////////////////////////////////////////////////////////////\n// Let's make <ContentToggle> re-usable and render a few of them. Title and\n// children are properties we can pass in from the parent component.\n\n////////////////////////////////////////////////////////////////////////////////\n// Wrap a few <ContentToggle>s in a <ToggleTracker> that tracks the # of times\n// it has been toggled and shows a counter. <ContentToggle> gets an onToggle\n// handler, declared as a function in propTypes.\n\n////////////////////////////////////////////////////////////////////////////////\n// But we just got finished making <ContentToggle> generic, and now\n// <ToggleTracker> is not! Can we make it generic as well? React.cloneElement\n// can help us pass props to elements that weren't initially provided.\n//\n// Side note: Be careful to use the React.Children utility methods.\n// this.props.children is opaque!\n\n//class ContentToggle extends React.Component {\n//  state = {\n//    isOpen: false\n//  }\n//\n//  handleClick() {\n//    this.setState({\n//      isOpen: !this.state.isOpen\n//    })\n//\n//    if (this.props.onToggle)\n//      this.props.onToggle()\n//  }\n//\n//  render() {\n//    let summaryClassName = 'ContentToggle__Summary'\n//\n//    if (this.state.isOpen)\n//      summaryClassName += ' ContentToggle__Summary--is-open'\n//\n//    return (\n//      <div className=\"ContentToggle\">\n//        <button onClick={this.handleClick} className={summaryClassName}>\n//          {this.props.title}\n//        </button>\n//        {this.state.isOpen && (\n//          <div className=\"ContentToggle__Details\">\n//            {this.props.children}\n//          </div>\n//        )}\n//      </div>\n//    )\n//  }\n//}\n//\n//class ToggleTracker extends React.Component {\n//  state = {\n//    numToggles: 0\n//  }\n//\n//  handleToggle() {\n//    this.setState({\n//      numToggles: this.state.numToggles + 1\n//    })\n//  }\n//\n//  render() {\n//    let { children } = this.props\n//\n//    children = React.Children.map(children, (child) => (\n//      React.cloneElement(child, {\n//        onToggle: this.handleToggle\n//      })\n//    ))\n//\n//    return (\n//      <div>\n//        <pre>{JSON.stringify(this.state, null, 2)}</pre>\n//        {children}\n//      </div>\n//    )\n//  }\n//}\n//\n//ReactDOM.render((\n//  <ToggleTracker>\n//    <ContentToggle title=\"Tacos\">\n//      <p>A taco is a traditional Mexican dish composed of a corn or wheat tortilla folded or rolled around a filling.</p>\n//    </ContentToggle>\n//    <ContentToggle title=\"Burritos\">\n//      <p>A burrito is a type of Mexican and Tex-Mex food, consisting of a wheat flour tortilla wrapped or folded into a cylindrical shape to completely enclose the filling (in contrast to a taco, which is generally formed by simply folding a tortilla in half around a filling, leaving the semicircular perimeter open).</p>\n//    </ContentToggle>\n//  </ToggleTracker>\n//), document.getElementById('app'))\n\n//////////////////\n// WEBPACK FOOTER\n// ./subjects/Components/lecture.js\n// module id = 0\n// module chunks = 8\n//# sourceURL=webpack:///./subjects/Components/lecture.js?");

/***/ }
]);