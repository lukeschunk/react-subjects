webpackJsonp([57],{

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _react = __webpack_require__(70);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = __webpack_require__(103);\n\nvar _App = __webpack_require__(439);\n\nvar _App2 = _interopRequireDefault(_App);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _reactDom.render)(_react2.default.createElement(_App2.default, { contacts: window.DATA.contacts }), document.getElementById('app')); ////////////////////////////////////////////////////////////////////////////////\n// Solution\n//\n// First, fire up the server:\n//\n// 1. Run `npm run server-solution` from the root of this repository\n// 2. Open http://localhost:8081 (not 8080)\n//\n// Now let's write some code:\n//\n// 1. Right now we're rendering the entire application client-side. Check\n//    out the source of <App>. Our server is essentially sending an empty\n//    <body> tag down to the client. Use the \"view source\" feature in your\n//    web browser to see the HTML the server is sending.\n// 2. We'd like to render *something* on the server. Use one of react-dom/server's\n//    render methods inside the server's request handler (see `server.js`) to\n//    inject <App>'s HTML into the #app element before we send the response.\n// 3. That's a little better, but we're still just sending a lonely <p> tag\n//    down to the client and then fetching the data once we mount. We can do\n//    better. Move the data-fetching out of <App>'s componentDidMount and into\n//    the request handler on the server (hint: inject the contacts into <App>\n//    via a prop instead).\n// 4. There's a warning in your browser console! The HTML we're sending from\n//    the server doesn't match what React expected on the initial render client-side.\n//    To fix this, send the data along with the response in the HTML and pick it\n//    up when we render the <App> on the client.\n//\n// Note: As you go through the steps, try using the \"view source\" feature of\n// your web browser to see the actual HTML you're rendering on the server.\n////////////////////////////////////////////////////////////////////////////////\n\n//////////////////\n// WEBPACK FOOTER\n// ./subjects/ServerRendering/solution.js\n// module id = 0\n// module chunks = 57\n//# sourceURL=webpack:///./subjects/ServerRendering/solution.js?");

/***/ },

/***/ 439:
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = __webpack_require__(70);\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar App = _react2.default.createClass({\n  displayName: 'App',\n\n  propTypes: {\n    contacts: _react2.default.PropTypes.array\n  },\n\n  render: function render() {\n    var contacts = this.props.contacts;\n\n\n    return _react2.default.createElement(\n      'div',\n      null,\n      _react2.default.createElement(\n        'h1',\n        null,\n        '\\xA1Universal App!'\n      ),\n      contacts ? _react2.default.createElement(\n        'ul',\n        null,\n        contacts.map(function (contact) {\n          return _react2.default.createElement(\n            'li',\n            { key: contact.id },\n            contact.first,\n            ' ',\n            contact.last\n          );\n        })\n      ) : _react2.default.createElement(\n        'p',\n        null,\n        'Loading...'\n      )\n    );\n  }\n});\n\nexports.default = App;\n\n//////////////////\n// WEBPACK FOOTER\n// ./subjects/ServerRendering/solution/App.js\n// module id = 439\n// module chunks = 57\n//# sourceURL=webpack:///./subjects/ServerRendering/solution/App.js?");

/***/ }

});