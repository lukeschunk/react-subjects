webpackJsonp([14],{

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _react = __webpack_require__(70);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = __webpack_require__(103);\n\nvar _styles = __webpack_require__(275);\n\nvar styles = _interopRequireWildcard(_styles);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n////////////////////////////////////////////////////////////////////////////////\n// Sometimes you don't want to specify how deep in the view tree the child\n// components need to be, our current implementation expects TabList/TabPanels\n// to be immediate children of Tabs, also Tab and TabPanel are required to be\n// immediate children of their parent components. We really only care about the\n// interactivity between the components, not their hierarchy.\n//\n// We could recursively check children with each render, which seems like a bad\n// plan, so instead we can use a feature called \"context\".\n\nvar TabList = _react2.default.createClass({\n  displayName: 'TabList',\n  render: function render() {\n    var _this = this;\n\n    var children = _react2.default.Children.map(this.props.children, function (child, index) {\n      return _react2.default.cloneElement(child, {\n        isActive: index === _this.props.activeIndex,\n        onClick: function onClick() {\n          return _this.props.onActivate(index);\n        }\n      });\n    });\n    return _react2.default.createElement(\n      'div',\n      { style: styles.tabs },\n      children\n    );\n  }\n});\n\nvar Tab = _react2.default.createClass({\n  displayName: 'Tab',\n  render: function render() {\n    return _react2.default.createElement(\n      'div',\n      {\n        onClick: this.props.disabled ? null : this.props.onClick,\n        style: this.props.disabled ? styles.disabledTab : this.props.isActive ? styles.activeTab : styles.tab\n      },\n      this.props.children\n    );\n  }\n});\n\nvar TabPanels = _react2.default.createClass({\n  displayName: 'TabPanels',\n  render: function render() {\n    return _react2.default.createElement(\n      'div',\n      { style: styles.tabPanels },\n      this.props.children[this.props.activeIndex]\n    );\n  }\n});\n\nvar TabPanel = _react2.default.createClass({\n  displayName: 'TabPanel',\n  render: function render() {\n    return _react2.default.createElement(\n      'div',\n      null,\n      this.props.children\n    );\n  }\n});\n\nvar Tabs = _react2.default.createClass({\n  displayName: 'Tabs',\n  getInitialState: function getInitialState() {\n    return {\n      activeIndex: 0\n    };\n  },\n  render: function render() {\n    var _this2 = this;\n\n    var children = _react2.default.Children.map(this.props.children, function (child, index) {\n      if (child.type === TabPanels) {\n        return _react2.default.cloneElement(child, {\n          activeIndex: _this2.state.activeIndex\n        });\n      } else if (child.type === TabList) {\n        return _react2.default.cloneElement(child, {\n          activeIndex: _this2.state.activeIndex,\n          onActivate: function onActivate(activeIndex) {\n            return _this2.setState({ activeIndex: activeIndex });\n          }\n        });\n      } else {\n        return child;\n      }\n    });\n\n    return _react2.default.createElement(\n      'div',\n      null,\n      children\n    );\n  }\n});\n\nvar App = _react2.default.createClass({\n  displayName: 'App',\n  render: function render() {\n    return _react2.default.createElement(\n      'div',\n      null,\n      _react2.default.createElement(\n        Tabs,\n        null,\n        _react2.default.createElement(\n          TabList,\n          null,\n          _react2.default.createElement(\n            Tab,\n            null,\n            'Tacos'\n          ),\n          _react2.default.createElement(\n            Tab,\n            { disabled: true },\n            'Burritos'\n          ),\n          _react2.default.createElement(\n            Tab,\n            null,\n            'Coconut Korma'\n          )\n        ),\n        _react2.default.createElement(\n          TabPanels,\n          null,\n          _react2.default.createElement(\n            TabPanel,\n            null,\n            _react2.default.createElement(\n              'p',\n              null,\n              'Tacos are delicious'\n            )\n          ),\n          _react2.default.createElement(\n            TabPanel,\n            null,\n            _react2.default.createElement(\n              'p',\n              null,\n              'Sometimes a burrito is what you really need.'\n            )\n          ),\n          _react2.default.createElement(\n            TabPanel,\n            null,\n            _react2.default.createElement(\n              'p',\n              null,\n              'Might be your best option.'\n            )\n          )\n        )\n      )\n    );\n  }\n});\n\n(0, _reactDom.render)(_react2.default.createElement(App, null), document.getElementById('app'));\n\n////////////////////////////////////////////////////////////////////////////////\n// Wrapping TabPanels in a div breaks everything, lets introduce context\n\n//const TabList = React.createClass({\n//  render () {\n//    const children = React.Children.map(this.props.children, (child, index) => {\n//      return React.cloneElement(child, {\n//        isActive: index === this.props.activeIndex,\n//        onClick: () => this.props.onActivate(index)\n//      })\n//    })\n//    return <div style={styles.tabs}>{children}</div>\n//  }\n//})\n//\n//const Tab = React.createClass({\n//  render () {\n//    return (\n//      <div\n//        onClick={this.props.disabled ? null : this.props.onClick}\n//        style={this.props.disabled ? styles.disabledTab : (\n//          this.props.isActive ? styles.activeTab : styles.tab\n//        )}\n//      >\n//        {this.props.children}\n//      </div>\n//    )\n//  }\n//})\n//\n//const TabPanels = React.createClass({\n//  contextTypes: {\n//    activeIndex: React.PropTypes.number\n//  },\n//\n//  render () {\n//    return (\n//      <div style={styles.tabPanels}>\n//        {this.props.children[this.context.activeIndex]}\n//      </div>\n//    )\n//  }\n//})\n//\n//const TabPanel = React.createClass({\n//  render () {\n//    return <div>{this.props.children}</div>\n//  }\n//})\n//\n//const Tabs = React.createClass({\n//  getInitialState() {\n//    return {\n//      activeIndex: 0\n//    }\n//  },\n//\n//  childContextTypes: {\n//    activeIndex: React.PropTypes.number\n//  },\n//\n//  getChildContext () {\n//    return {\n//      activeIndex: this.state.activeIndex\n//    }\n//  },\n//\n//  render() {\n//    const children = React.Children.map(this.props.children, (child, index) => {\n//      if (child.type === TabList) {\n//        return React.cloneElement(child, {\n//          activeIndex: this.state.activeIndex,\n//          onActivate: (activeIndex) => this.setState({ activeIndex })\n//        })\n//      }\n//      else {\n//        return child\n//      }\n//    })\n//\n//    return <div>{children}</div>\n//  }\n//})\n//\n//const App = React.createClass({\n//  render () {\n//    return (\n//      <div>\n//        <Tabs>\n//          <TabList>\n//            <Tab>Tacos</Tab>\n//            <Tab disabled>Burritos</Tab>\n//            <Tab>Coconut Korma</Tab>\n//          </TabList>\n//\n//          <div>\n//            <TabPanels>\n//              <TabPanel>\n//                <p>Tacos are delicious</p>\n//              </TabPanel>\n//              <TabPanel>\n//                <p>Sometimes a burrito is what you really need.</p>\n//              </TabPanel>\n//              <TabPanel>\n//                <p>Might be your best option.</p>\n//              </TabPanel>\n//            </TabPanels>\n//          </div>\n//        </Tabs>\n//      </div>\n//    )\n//  }\n//})\n//\n//render(<App/>, document.getElementById('app'))\n\n////////////////////////////////////////////////////////////////////////////////\n// Wrapping TabList also breaks (no more active styles), lets check context for\n// isActive and the click handler instead of props\n\n//const TabList = React.createClass({\n//  contextTypes: {\n//    activeIndex: React.PropTypes.number,\n//    onActivate: React.PropTypes.func\n//  },\n//\n//  render() {\n//    const children = React.Children.map(this.props.children, (child, index) => (\n//      React.cloneElement(child, {\n//        isActive: index === this.context.activeIndex,\n//        onClick: () => this.context.onActivate(index)\n//      })\n//    ))\n//\n//    return <div style={styles.tabs}>{children}</div>\n//  }\n//})\n//\n//const Tab = React.createClass({\n//  render() {\n//    return (\n//      <div\n//        onClick={this.props.disabled ? null : this.props.onClick}\n//        style={this.props.disabled ? styles.disabledTab : (\n//          this.props.isActive ? styles.activeTab : styles.tab\n//        )}\n//      >\n//        {this.props.children}\n//      </div>\n//    )\n//  }\n//})\n//\n//const TabPanels = React.createClass({\n//  contextTypes: {\n//    activeIndex: React.PropTypes.number\n//  },\n//\n//  render() {\n//    return (\n//      <div style={styles.tabPanels}>\n//        {this.props.children[this.context.activeIndex]}\n//      </div>\n//    )\n//  }\n//})\n//\n//const Tabs = React.createClass({\n//  childContextTypes: {\n//    activeIndex: React.PropTypes.number,\n//    onActivate: React.PropTypes.func\n//  },\n//\n//  getInitialState() {\n//    return {\n//      activeIndex: 0\n//    }\n//  },\n//\n//  getChildContext() {\n//    return {\n//      activeIndex: this.state.activeIndex,\n//      onActivate: (activeIndex) => {\n//        this.setState({ activeIndex })\n//      }\n//    }\n//  },\n//\n//  render() {\n//    return <div>{this.props.children}</div>\n//  }\n//})\n//\n//const App = React.createClass({\n//  render() {\n//    return (\n//      <div>\n//        <Tabs>\n//          <div>\n//            <TabList>\n//              <Tab>Tacos</Tab>\n//              <Tab disabled>Burritos</Tab>\n//              <Tab>Coconut Korma</Tab>\n//            </TabList>\n//          </div>\n//\n//          <div>\n//            <TabPanels>\n//              <p>Tacos are delicious</p>\n//              <p>Sometimes a burrito is what you really need.</p>\n//              <p>Might be your best option.</p>\n//            </TabPanels>\n//          </div>\n//        </Tabs>\n//      </div>\n//    )\n//  }\n//})\n//\n//render(<App/>, document.getElementById('app'))\n\n//////////////////\n// WEBPACK FOOTER\n// ./subjects/Context/lecture.js\n// module id = 0\n// module chunks = 14\n//# sourceURL=webpack:///./subjects/Context/lecture.js?");

/***/ },

/***/ 275:
/***/ function(module, exports) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar tabs = exports.tabs = {};\n\nvar tab = exports.tab = {\n  display: 'inline-block',\n  padding: 10,\n  margin: 10,\n  borderBottom: '4px solid',\n  borderBottomColor: '#ccc',\n  cursor: 'pointer'\n};\n\nvar activeTab = exports.activeTab = _extends({}, tab, {\n  borderBottomColor: '#000'\n});\n\nvar disabledTab = exports.disabledTab = _extends({}, tab, {\n  opacity: 0.25,\n  cursor: 'default'\n});\n\nvar tabPanels = exports.tabPanels = {\n  padding: 10\n};\n\n//////////////////\n// WEBPACK FOOTER\n// ./subjects/Context/styles.js\n// module id = 275\n// module chunks = 14\n//# sourceURL=webpack:///./subjects/Context/styles.js?");

/***/ }

});